// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealG.Data;

#nullable disable

namespace RealG.Migrations
{
    [DbContext(typeof(RealGContext))]
    partial class RealGContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RealG.Models.Bokning", b =>
                {
                    b.Property<int>("BokningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BokningId"));

                    b.Property<DateTime>("BokadDatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("FöreställningId")
                        .HasColumnType("int");

                    b.Property<string>("KundEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KundNamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("StolNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BokningId");

                    b.HasIndex("FöreställningId");

                    b.ToTable("Bokning");
                });

            modelBuilder.Entity("RealG.Models.Föreställning", b =>
                {
                    b.Property<int>("FöreställningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FöreställningId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("SalongId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Tider")
                        .HasColumnType("time");

                    b.HasKey("FöreställningId");

                    b.HasIndex("FilmId");

                    b.HasIndex("SalongId");

                    b.ToTable("Föreställning");
                });

            modelBuilder.Entity("RealG.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Längd")
                        .HasColumnType("int");

                    b.Property<decimal>("Pris")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("RealG.Models.Salong", b =>
                {
                    b.Property<int>("SalongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalongId"));

                    b.Property<int>("AntalStolar")
                        .HasColumnType("int");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.HasKey("SalongId");

                    b.ToTable("Salong");
                });

            modelBuilder.Entity("RealG.Models.Bokning", b =>
                {
                    b.HasOne("RealG.Models.Föreställning", "Föreställning")
                        .WithMany("Bokningar")
                        .HasForeignKey("FöreställningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Föreställning");
                });

            modelBuilder.Entity("RealG.Models.Föreställning", b =>
                {
                    b.HasOne("RealG.Models.Movie", "Film")
                        .WithMany("Föreställningar")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealG.Models.Salong", "Salong")
                        .WithMany("Föreställningar")
                        .HasForeignKey("SalongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Salong");
                });

            modelBuilder.Entity("RealG.Models.Föreställning", b =>
                {
                    b.Navigation("Bokningar");
                });

            modelBuilder.Entity("RealG.Models.Movie", b =>
                {
                    b.Navigation("Föreställningar");
                });

            modelBuilder.Entity("RealG.Models.Salong", b =>
                {
                    b.Navigation("Föreställningar");
                });
#pragma warning restore 612, 618
        }
    }
}
